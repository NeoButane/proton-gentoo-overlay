diff --git a/meson.build b/meson.build
index 49535bdc..7ab559ea 100644
--- a/meson.build
+++ b/meson.build
@@ -3,6 +3,12 @@ project('dxvk', ['c', 'cpp'], version : 'v1.3.2', meson_version : '>= 0.43')
 cpu_family = target_machine.cpu_family()
 
 add_project_arguments('-DNOMINMAX', language : 'cpp')
+if get_option('enable_hud')
+  add_project_arguments('-DDXVK_HUD', language : 'cpp')
+endif
+if get_option('enable_openvr')
+  add_project_arguments('-DDXVK_OPENVR', language : 'cpp')
+endif
 
 dxvk_compiler = meson.get_compiler('cpp')
 if dxvk_compiler.get_id() == 'msvc'
diff --git a/meson_options.txt b/meson_options.txt
index b3c235f9..ff17b2b1 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -1,4 +1,6 @@
 option('enable_tests', type : 'boolean', value : false)
+option('enable_openvr',type : 'boolean', value : true)
+option('enable_hud',   type : 'boolean', value : true)
 option('enable_dxgi',  type : 'boolean', value : true, description: 'Build DXGI')
 option('enable_d3d10', type : 'boolean', value : true, description: 'Build D3D10')
 option('enable_d3d11', type : 'boolean', value : true, description: 'Build D3D11')
diff --git a/src/d3d11/d3d11_swapchain.cpp b/src/d3d11/d3d11_swapchain.cpp
index 3c5c0fcb..9b442230 100644
--- a/src/d3d11/d3d11_swapchain.cpp
+++ b/src/d3d11/d3d11_swapchain.cpp
@@ -29,7 +29,9 @@ namespace dxvk {
       CreatePresenter();
     
     CreateBackBuffer();
+    #ifdef DXVK_HUD
     CreateHud();
+    #endif
     
     InitRenderState();
     InitSamplers();
@@ -198,8 +200,10 @@ namespace dxvk {
     auto syncEvent = m_dxgiDevice->GetFrameSyncEvent(m_desc.BufferCount);
     syncEvent->wait();
     
+    #ifdef DXVK_HUD
     if (m_hud != nullptr)
       m_hud->update();
+    #endif
 
     for (uint32_t i = 0; i < SyncInterval || i < 1; i++) {
       SynchronizePresent();
@@ -293,9 +297,11 @@ namespace dxvk {
 
       m_context->draw(3, 1, 0, 0);
 
+      #ifdef DXVK_HUD
       if (m_hud != nullptr)
         m_hud->render(m_context, info.imageExtent);
-      
+      #endif
+
       if (i + 1 >= SyncInterval)
         m_context->queueSignal(syncEvent);
 
@@ -586,9 +592,11 @@ namespace dxvk {
   }
 
 
+  #ifdef DXVK_HUD
   void D3D11SwapChain::CreateHud() {
     m_hud = hud::Hud::createHud(m_device);
   }
+  #endif
 
 
   void D3D11SwapChain::InitRenderState() {
diff --git a/src/d3d11/d3d11_swapchain.h b/src/d3d11/d3d11_swapchain.h
index 33082791..2b7badf1 100644
--- a/src/d3d11/d3d11_swapchain.h
+++ b/src/d3d11/d3d11_swapchain.h
@@ -1,9 +1,9 @@
 #pragma once
 
 #include "d3d11_texture.h"
-
+#ifdef DXVK_HUD
 #include "../dxvk/hud/dxvk_hud.h"
-
+#endif
 namespace dxvk {
   
   class D3D11Device;
@@ -102,7 +102,9 @@ namespace dxvk {
     Rc<DxvkImage>           m_swapImageResolve;
     Rc<DxvkImageView>       m_swapImageView;
 
+    #ifdef DXVK_HUD
     Rc<hud::Hud>            m_hud;
+    #endif
 
     DxvkInputAssemblyState  m_iaState;
     DxvkRasterizerState     m_rsState;
@@ -141,7 +143,9 @@ namespace dxvk {
     
     void DestroyGammaTexture();
     
+    #ifdef DXVK_HUD
     void CreateHud();
+    #endif
 
     void InitRenderState();
 
diff --git a/src/dxvk/dxvk_instance.cpp b/src/dxvk/dxvk_instance.cpp
index 29c63869..1c1a50cf 100644
--- a/src/dxvk/dxvk_instance.cpp
+++ b/src/dxvk/dxvk_instance.cpp
@@ -1,8 +1,9 @@
 #include <version.h>
 
 #include "dxvk_instance.h"
+#ifdef DXVK_OPENVR
 #include "dxvk_openvr.h"
-
+#endif
 #include <algorithm>
 
 namespace dxvk {
@@ -15,19 +16,21 @@ namespace dxvk {
     m_config.merge(Config::getAppConfig(env::getExePath()));
     m_config.logOptions();
 
+#ifdef DXVK_OPENVR
     g_vrInstance.initInstanceExtensions();
-
+#endif
     m_vkl = new vk::LibraryFn();
     m_vki = new vk::InstanceFn(true, this->createInstance());
 
     m_adapters = this->queryAdapters();
+#ifdef DXVK_OPENVR
     g_vrInstance.initDeviceExtensions(this);
 
     for (uint32_t i = 0; i < m_adapters.size(); i++) {
       m_adapters[i]->enableExtensions(
         g_vrInstance.getDeviceExtensions(i));
     }
-
+#endif
     m_options = DxvkOptions(m_config);
   }
   
@@ -88,7 +91,9 @@ namespace dxvk {
       throw DxvkError("DxvkInstance: Failed to create instance");
     
     // Enable additional extensions if necessary
+#ifdef DXVK_OPENVR
     extensionsEnabled.merge(g_vrInstance.getInstanceExtensions());
+#endif
     DxvkNameList extensionNameList = extensionsEnabled.toNameList();
     
     Logger::info("Enabled instance extensions:");
diff --git a/src/dxvk/dxvk_instance.h b/src/dxvk/dxvk_instance.h
index 53288231..2a33fa42 100644
--- a/src/dxvk/dxvk_instance.h
+++ b/src/dxvk/dxvk_instance.h
@@ -5,7 +5,9 @@
 #include "dxvk_adapter.h"
 #include "dxvk_device.h"
 #include "dxvk_device_filter.h"
+#ifdef DXVK_OPENVR
 #include "dxvk_openvr.h"
+#endif
 
 namespace dxvk {
   
diff --git a/src/dxvk/meson.build b/src/dxvk/meson.build
index 867f3002..bc76c68b 100644
--- a/src/dxvk/meson.build
+++ b/src/dxvk/meson.build
@@ -43,14 +43,18 @@ dxvk_shaders = files([
   'shaders/dxvk_unpack_d24s8_as_d32s8.comp',
   'shaders/dxvk_unpack_d24s8.comp',
   'shaders/dxvk_unpack_d32s8.comp',
-  
-  'hud/shaders/hud_line_frag.frag',
-  'hud/shaders/hud_line_vert.vert',
-
-  'hud/shaders/hud_text_frag.frag',
-  'hud/shaders/hud_text_vert.vert',
 ])
 
+if get_option('enable_hud')
+  dxvk_shaders += files([
+    'hud/shaders/hud_line_frag.frag',
+    'hud/shaders/hud_line_vert.vert',
+
+    'hud/shaders/hud_text_frag.frag',
+    'hud/shaders/hud_text_vert.vert',
+  ])
+endif
+
 dxvk_src = files([
   'dxvk_adapter.cpp',
   'dxvk_barrier.cpp',
@@ -79,7 +83,6 @@ dxvk_src = files([
   'dxvk_meta_mipgen.cpp',
   'dxvk_meta_pack.cpp',
   'dxvk_meta_resolve.cpp',
-  'dxvk_openvr.cpp',
   'dxvk_options.cpp',
   'dxvk_pipecache.cpp',
   'dxvk_pipelayout.cpp',
@@ -97,16 +100,24 @@ dxvk_src = files([
   'dxvk_stats.cpp',
   'dxvk_unbound.cpp',
   'dxvk_util.cpp',
-  
-  'hud/dxvk_hud.cpp',
-  'hud/dxvk_hud_config.cpp',
-  'hud/dxvk_hud_devinfo.cpp',
-  'hud/dxvk_hud_font.cpp',
-  'hud/dxvk_hud_fps.cpp',
-  'hud/dxvk_hud_renderer.cpp',
-  'hud/dxvk_hud_stats.cpp',
 ])
 
+if get_option('enable_hud')
+  dxvk_src += files([
+    'hud/dxvk_hud.cpp',
+    'hud/dxvk_hud_config.cpp',
+    'hud/dxvk_hud_devinfo.cpp',
+    'hud/dxvk_hud_font.cpp',
+    'hud/dxvk_hud_fps.cpp',
+    'hud/dxvk_hud_renderer.cpp',
+    'hud/dxvk_hud_stats.cpp',
+  ])
+endif
+
+if get_option('enable_openvr')
+  dxvk_src += files(['dxvk_openvr.cpp'])
+endif
+
 thread_dep = dependency('threads')
 
 dxvk_lib = static_library('dxvk', dxvk_src, glsl_generator.process(dxvk_shaders), dxvk_version,
